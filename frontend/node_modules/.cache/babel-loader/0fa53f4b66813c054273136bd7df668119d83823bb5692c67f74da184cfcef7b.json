{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prince\\\\Desktop\\\\myReactProjects\\\\react-router-project\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport AuthForm from '../components/AuthForm';\nimport { json, redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport const action = async _ref => {\n  let {\n    request\n  } = _ref;\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login';\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  if (mode !== 'login' && mode !== 'signUp') {\n    throw json({\n      message: 'Unsupported mode'\n    }, {\n      status: 422\n    });\n  }\n  ;\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  ;\n  if (!response.ok) {\n    throw json({\n      message: 'Could not autenticate user'\n    }, {\n      status: 500\n    });\n  }\n  ;\n  return redirect();\n};\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["AuthForm","json","redirect","AuthenticationPage","action","request","searchParams","URL","url","mode","get","data","formData","authData","email","password","message","status","response","fetch","method","headers","body","JSON","stringify","ok"],"sources":["C:/Users/Prince/Desktop/myReactProjects/react-router-project/frontend/src/pages/Authentication.js"],"sourcesContent":["import AuthForm from '../components/AuthForm';\nimport { json, redirect } from 'react-router-dom';\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport const action = async({ request }) => {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login';\n\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password'),\n  };\n\n  if(mode !== 'login' && mode !== 'signUp'){\n    throw json({message: 'Unsupported mode'}, { status: 422});\n  };\n\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n\n  if(response.status === 422 || response.status === 401){\n    return response;\n  };\n\n  if(!response.ok){\n    throw json({message: 'Could not autenticate user'}, { status: 500});\n  };\n\n  return redirect()\n\n};"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC;AAElD,SAASC,kBAAkB,GAAG;EAC5B,oBAAO,QAAC,QAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AACrB;AAAC,KAFQA,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,MAAMC,MAAM,GAAG,cAAsB;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EACrC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EAEhD,MAAMC,IAAI,GAAG,MAAMN,OAAO,CAACO,QAAQ,EAAE;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACD,GAAG,CAAC,OAAO,CAAC;IACxBK,QAAQ,EAAEJ,IAAI,CAACD,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,IAAGD,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAC;IACvC,MAAMR,IAAI,CAAC;MAACe,OAAO,EAAE;IAAkB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC,CAAC;EAC3D;EAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGV,IAAI,EAAE;IAC5DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAGK,QAAQ,CAACD,MAAM,KAAK,GAAG,IAAIC,QAAQ,CAACD,MAAM,KAAK,GAAG,EAAC;IACpD,OAAOC,QAAQ;EACjB;EAAC;EAED,IAAG,CAACA,QAAQ,CAACO,EAAE,EAAC;IACd,MAAMxB,IAAI,CAAC;MAACe,OAAO,EAAE;IAA4B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC,CAAC;EACrE;EAAC;EAED,OAAOf,QAAQ,EAAE;AAEnB,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}