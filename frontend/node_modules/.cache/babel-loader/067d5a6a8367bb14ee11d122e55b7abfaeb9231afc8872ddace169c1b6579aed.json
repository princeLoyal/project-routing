{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prince\\\\Desktop\\\\myReactProjects\\\\react-router-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\n;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: ' Could not fetch events'\n    }), {\n      status: 500\n    };\n  } else {\n    return response;\n  }\n  ;\n};\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\n;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","EventsPage","data","isError","message","events","loadEvents","response","fetch","ok","status","loader"],"sources":["C:/Users/Prince/Desktop/myReactProjects/react-router-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer} from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n\r\n  if(data.isError){\r\n    return <p>{data.message}</p>\r\n  }\r\n  const events = data.events;\r\n  \r\n  return (\r\n    <>\r\n       <EventsList events={events} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventsPage;\r\n\r\nconst loadEvents = async () => {\r\n  const response = await fetch('http://localhost:8080/events');\r\n  if (!response.ok) {\r\n    throw json({message:' Could not fetch events'}), \r\n    { status: 500}\r\n  } else {\r\n   return response;\r\n  };\r\n}\r\n\r\nexport function loader (){\r\n  defer({\r\n    events: loadEvents(),\r\n  });\r\n };"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAO,kBAAkB;AAE5D,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAAA;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAMC,IAAI,GAAGL,aAAa,EAAE;EAE5B,IAAGK,IAAI,CAACC,OAAO,EAAC;IACd,oBAAO;MAAA,UAAID,IAAI,CAACE;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK;EAC9B;EACA,MAAMC,MAAM,GAAGH,IAAI,CAACG,MAAM;EAE1B,oBACE;IAAA,uBACG,QAAC,UAAU;MAAC,MAAM,EAAEA;IAAO;MAAA;MAAA;MAAA;IAAA;EAAG,iBAC9B;AAEP;AAAC,GAbQJ,UAAU;EAAA,QACJJ,aAAa;AAAA;AAAA,KADnBI,UAAU;AAalB;AAED,eAAeA,UAAU;AAEzB,MAAMK,UAAU,GAAG,YAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMX,IAAI,CAAC;MAACM,OAAO,EAAC;IAAyB,CAAC,CAAC,EAC/C;MAAEM,MAAM,EAAE;IAAG,CAAC;EAChB,CAAC,MAAM;IACN,OAAOH,QAAQ;EAChB;EAAC;AACH,CAAC;AAED,OAAO,SAASI,MAAM,GAAG;EACvBZ,KAAK,CAAC;IACJM,MAAM,EAAEC,UAAU;EACpB,CAAC,CAAC;AACH;AAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}