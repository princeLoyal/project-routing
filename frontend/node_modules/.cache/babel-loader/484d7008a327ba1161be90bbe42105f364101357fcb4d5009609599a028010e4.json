{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prince\\\\Desktop\\\\myReactProjects\\\\react-router-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n\n  // if(data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  // const events = data.events;\n\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    event: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n  // <Suspense fallback={<p style={{textAlign: 'center'}}>Loading ...</p>}>\n  // <Await resolve={events}>\n  // {   (loadedEvent) => <EventsList events={loadedEvent}/> }\n  // </Await>\n  // </Suspense>\n  ;\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\n;\nexport default EventsPage;\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: ' Could not fetch events'\n    }), {\n      status: 500\n    };\n  } else {\n    return response;\n  }\n  ;\n};\n\n// export function loader (){\n//   defer({\n//     events: loadEvents(),\n//   });\n//  };\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","Suspense","EventsList","EventsPage","events","loader","response","fetch","ok","message","status"],"sources":["C:/Users/Prince/Desktop/myReactProjects/react-router-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer, Await} from 'react-router-dom';\r\nimport { Suspense } from 'react';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const { events } = useLoaderData();\r\n\r\n  // if(data.isError){\r\n  //   return <p>{data.message}</p>\r\n  // }\r\n  // const events = data.events;\r\n  \r\n  return (\r\n    <EventsList event/>\r\n    // <Suspense fallback={<p style={{textAlign: 'center'}}>Loading ...</p>}>\r\n    // <Await resolve={events}>\r\n    // {   (loadedEvent) => <EventsList events={loadedEvent}/> }\r\n    // </Await>\r\n    // </Suspense>\r\n  );\r\n};\r\n\r\nexport default EventsPage;\r\n\r\nexport const loader = async () => {\r\n  const response = await fetch('http://localhost:8080/events');\r\n  if (!response.ok) {\r\n    throw json({message:' Could not fetch events'}), \r\n    { status: 500}\r\n  } else {\r\n   return response;\r\n  };\r\n};\r\n\r\n// export function loader (){\r\n//   defer({\r\n//     events: loadEvents(),\r\n//   });\r\n//  };"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAO,kBAAkB;AACnE,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,EAAE;;EAElC;EACA;EACA;EACA;;EAEA,oBACE,QAAC,UAAU;IAAC,KAAK;EAAA;IAAA;IAAA;IAAA;EAAA;EACjB;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAAC,GAhBQM,UAAU;EAAA,QACEN,aAAa;AAAA;AAAA,KADzBM,UAAU;AAgBlB;AAED,eAAeA,UAAU;AAEzB,OAAO,MAAME,MAAM,GAAG,YAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMV,IAAI,CAAC;MAACW,OAAO,EAAC;IAAyB,CAAC,CAAC,EAC/C;MAAEC,MAAM,EAAE;IAAG,CAAC;EAChB,CAAC,MAAM;IACN,OAAOJ,QAAQ;EAChB;EAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}