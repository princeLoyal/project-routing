{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prince\\\\Desktop\\\\myReactProjects\\\\react-router-project\\\\frontend\\\\src\\\\App.js\";\nimport HomePage from './pages/HomePage';\nimport EventsPage, { loader as eventLoader } from './pages/EventsPage';\nimport EventDetailPage, { loader as eventDetailLoader } from './pages/EventDetailPage';\nimport NewEventPage from './pages/NewEventPage';\nimport EditEventPage from './pages/EditEventPage';\nimport Root from './components/RootLayout';\nimport EventsRoot from './components/EventsRoot';\nimport ErrorPage from './pages/Error';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 14\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 19\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsRoot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 20\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 37\n      }, this),\n      loader: eventLoader\n    }, {\n      path: ':event'\n    }, {\n      path: ':eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 24\n      }, this),\n      loader: eventDetailLoader\n    }, {\n      path: 'new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 36\n      }, this)\n    }, {\n      path: ':eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 46\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["HomePage","EventsPage","loader","eventLoader","EventDetailPage","eventDetailLoader","NewEventPage","EditEventPage","Root","EventsRoot","ErrorPage","createBrowserRouter","RouterProvider","router","path","element","errorElement","children","index","App"],"sources":["C:/Users/Prince/Desktop/myReactProjects/react-router-project/frontend/src/App.js"],"sourcesContent":["import HomePage from './pages/HomePage';\nimport EventsPage, { loader as eventLoader} from './pages/EventsPage';\nimport EventDetailPage, { loader as eventDetailLoader} from './pages/EventDetailPage';\nimport NewEventPage from './pages/NewEventPage';\nimport EditEventPage from './pages/EditEventPage';\nimport Root from './components/RootLayout';\nimport EventsRoot from './components/EventsRoot';\nimport ErrorPage from './pages/Error';\n\nimport {createBrowserRouter, RouterProvider} from 'react-router-dom';\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nconst router = createBrowserRouter([\n  {\n    path: '/', \n    element: <Root />,\n    errorElement: <ErrorPage />,\n    children: [\n        {index: true, element: <HomePage />},\n        {\n          path: 'events', \n          element: <EventsRoot />,\n          children: [\n            {\n              index: true, element: <EventsPage />,\n              loader: eventLoader\n          },\n          {\n            path: ':event'\n          },\n            {\n              path: ':eventId', \n              element: <EventDetailPage />,\n              loader: eventDetailLoader\n            },\n            {path: 'new', element: <NewEventPage />},\n            {path: ':eventId/edit', element: <EditEventPage />}\n          ]\n        },\n    ]\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router}/>\n};\n\nexport default App;"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,IAAIC,MAAM,IAAIC,WAAW,QAAO,oBAAoB;AACrE,OAAOC,eAAe,IAAIF,MAAM,IAAIG,iBAAiB,QAAO,yBAAyB;AACrF,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,eAAe;AAErC,SAAQC,mBAAmB,EAAEC,cAAc,QAAO,kBAAkB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,MAAM,GAAGF,mBAAmB,CAAC,CACjC;EACEG,IAAI,EAAE,GAAG;EACTC,OAAO,eAAE,QAAC,IAAI;IAAA;IAAA;IAAA;EAAA,QAAG;EACjBC,YAAY,eAAE,QAAC,SAAS;IAAA;IAAA;IAAA;EAAA,QAAG;EAC3BC,QAAQ,EAAE,CACN;IAACC,KAAK,EAAE,IAAI;IAAEH,OAAO,eAAE,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA;EAAG,CAAC,EACpC;IACED,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAE,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;IACvBE,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MAAEH,OAAO,eAAE,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAG;MACpCb,MAAM,EAAEC;IACZ,CAAC,EACD;MACEW,IAAI,EAAE;IACR,CAAC,EACC;MACEA,IAAI,EAAE,UAAU;MAChBC,OAAO,eAAE,QAAC,eAAe;QAAA;QAAA;QAAA;MAAA,QAAG;MAC5Bb,MAAM,EAAEG;IACV,CAAC,EACD;MAACS,IAAI,EAAE,KAAK;MAAEC,OAAO,eAAE,QAAC,YAAY;QAAA;QAAA;QAAA;MAAA;IAAG,CAAC,EACxC;MAACD,IAAI,EAAE,eAAe;MAAEC,OAAO,eAAE,QAAC,aAAa;QAAA;QAAA;QAAA;MAAA;IAAG,CAAC;EAEvD,CAAC;AAEP,CAAC,CACF,CAAC;AAEF,SAASI,GAAG,GAAG;EACb,oBAAO,QAAC,cAAc;IAAC,MAAM,EAAEN;EAAO;IAAA;IAAA;IAAA;EAAA,QAAE;AAC1C;AAAC,KAFQM,GAAG;AAEX;AAED,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}